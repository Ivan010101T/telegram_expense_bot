# -*- coding: utf-8 -*-
"""Telegram Expense Bot (v.1.3.3)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CPrvXSa07WUHzSbSLoleKw0YdcsMBsCB
"""

import telebot
from telebot import types
import gspread
import os
import json
from io import StringIO
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã GOOGLE_CREDENTIALS
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.load(StringIO(GOOGLE_CREDENTIALS))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

sheet = client.open_by_key(SPREADSHEET_ID)
data_sheet = sheet.worksheet("–î–∞–Ω–Ω—ã–µ")
cat_sheet = sheet.worksheet("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
user_state = {}

BASE_CATEGORIES = {
    "–ï–¥–∞": ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–ö–∞—Ñ–µ"],
    "–ü—Ä–æ–µ–∑–¥": ["–ú–µ—Ç—Ä–æ", "–¢–∞–∫—Å–∏"],
    "–°–≤—è–∑—å": ["–ú–æ–±–∏–ª—å–Ω—ã–π", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"],
    "–û–ø–ª–∞—Ç–∞ –ö–£": ["–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–í–æ–¥–∞", "–ì–∞–∑"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–ö–∏–Ω–æ", "–ò–≥—Ä—ã", "–û—Ç–¥—ã—Ö"]
}

def initialize_categories():
    existing = cat_sheet.get_all_values()
    if len(existing) <= 1:
        for cat, subs in BASE_CATEGORIES.items():
            for sub in subs:
                cat_sheet.append_row([cat, sub])

initialize_categories()

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥"),
        types.KeyboardButton("üí∞ –î–æ—Ö–æ–¥"),
        types.KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        types.KeyboardButton("üìä –û—Ç—á—ë—Ç"),
        types.KeyboardButton("‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/—Ä–∞—Å—Ö–æ–¥ ‚Äî –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥\n/–¥–æ—Ö–æ–¥ ‚Äî –≤–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥\n/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n/—É–¥–∞–ª–∏—Ç—å ‚Äî —É–¥–∞–ª–∏—Ç—å\n/–æ—Ç—á—ë—Ç [–≥–æ–¥-–º–µ—Å—è—Ü] ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text in ["üí∏ –†–∞—Å—Ö–æ–¥", "/—Ä–∞—Å—Ö–æ–¥"])
def start_expense(message):
    start_transaction(message, "—Ä–∞—Å—Ö–æ–¥")

@bot.message_handler(func=lambda message: message.text in ["üí∞ –î–æ—Ö–æ–¥", "/–¥–æ—Ö–æ–¥"])
def start_income(message):
    start_transaction(message, "–¥–æ—Ö–æ–¥")

def start_transaction(message, type_):
    chat_id = message.chat.id
    categories = list(set([row[0] for row in cat_sheet.get_all_values()[1:] if row[0]]))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in categories:
        markup.add(cat)
    markup.add("‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    user_state[chat_id] = {"step": "category", "type": type_}
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    chat_id = message.chat.id
    state = user_state.get(chat_id)
    if not state:
        return

    step = state["step"]

    if step == "category":
        if message.text == "‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            state["step"] = "new_category"
        else:
            state["category"] = message.text
            show_subcategories(chat_id, message.text)

    elif step == "new_category":
        category = message.text.strip()
        cat_sheet.append_row([category, ""])
        state["category"] = category
        bot.send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        show_subcategories(chat_id, category)

    elif step == "subcategory":
        if message.text == "‚ûï –ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            state["step"] = "new_subcategory"
        else:
            state["subcategory"] = message.text
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            state["step"] = "amount"

    elif step == "new_subcategory":
        subcategory = message.text.strip()
        cat_sheet.append_row([state["category"], subcategory])
        state["subcategory"] = subcategory
        bot.send_message(chat_id, f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        state["step"] = "amount"

    elif step == "amount":
        try:
            amount = float(message.text.strip())
            now = datetime.now()
            now_str = now.strftime("%Y-%m-%d %H:%M:%S")
            year = now.strftime("%Y")
            month = now.strftime("%Y-%m")
            user = message.from_user.username or message.from_user.first_name
            data_sheet.append_row([
                now_str,
                year,
                month,
                state.get("type", "—Ä–∞—Å—Ö–æ–¥"),
                amount,
                state["category"],
                state["subcategory"],
                user
            ])
            bot.send_message(chat_id, f"‚úÖ {state['type'].capitalize()} {amount}‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{state['category']} / {state['subcategory']}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        except ValueError:
            bot.send_message(chat_id, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250")
        finally:
            user_state.pop(chat_id, None)

def show_subcategories(chat_id, category):
    rows = cat_sheet.get_all_values()[1:]
    subcategories = [r[1] for r in rows if r[0] == category and r[1]]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for sub in subcategories:
        markup.add(sub)
    markup.add("‚ûï –ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    user_state[chat_id]["step"] = "subcategory"
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

bot.polling()
