# -*- coding: utf-8 -*-
"""Telegram Expense Bot (v.1.3.5) - –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –≤ –æ–±–ª–∞–∫–µ
v.1.3.1 —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ–º–ø–∞ (–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ PyCharm)
v.1.3.5 —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è Telegram-–±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ,
—á—Ç–æ–±—ã –æ–Ω —Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –¥–∞–∂–µ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.
–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —É–¥–æ–±–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Railway.
—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ ¬´–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å¬ª, ¬´–£–¥–∞–ª–∏—Ç—å¬ª, ¬´–ù–∞–∑–∞–¥¬ª 
29.07.25(v.1.3.5) –¥–æ–±–∞–≤–ª–µ–Ω–∞ # === –ê–ù–¢–ò–°–ü–ê–ú –ó–ê–©–ò–¢–ê ===
"""

import telebot
from telebot import types
import gspread
import os
import json
from io import StringIO
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã GOOGLE_CREDENTIALS
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

try:
    creds_dict = json.load(StringIO(GOOGLE_CREDENTIALS))
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)

    sheet = client.open_by_key(SPREADSHEET_ID)
    data_sheet = sheet.worksheet("–î–∞–Ω–Ω—ã–µ")
    cat_sheet = sheet.worksheet("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
except Exception as e:
    print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç–∞–º:", e)
    exit(1)

bot = telebot.TeleBot(TELEGRAM_TOKEN)
user_state = {}

BASE_CATEGORIES = {
    "–ï–¥–∞": ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–ö–∞—Ñ–µ"],
    "–ü—Ä–æ–µ–∑–¥": ["–ú–µ—Ç—Ä–æ", "–¢–∞–∫—Å–∏"],
    "–°–≤—è–∑—å": ["–ú–æ–±–∏–ª—å–Ω—ã–π", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"],
    "–û–ø–ª–∞—Ç–∞ –ö–£": ["–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–í–æ–¥–∞", "–ì–∞–∑"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–ö–∏–Ω–æ", "–ò–≥—Ä—ã", "–û—Ç–¥—ã—Ö"]
}

def initialize_categories():
    existing = cat_sheet.get_all_values()
    if len(existing) <= 1:
        for cat, subs in BASE_CATEGORIES.items():
            for sub in subs:
                cat_sheet.append_row([cat, sub])

initialize_categories()

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥"),
        types.KeyboardButton("üí∞ –î–æ—Ö–æ–¥"),
        types.KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        types.KeyboardButton("üìä –û—Ç—á—ë—Ç"),
        types.KeyboardButton("‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/—Ä–∞—Å—Ö–æ–¥ ‚Äî –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥\n/–¥–æ—Ö–æ–¥ ‚Äî –≤–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥\n/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n/—É–¥–∞–ª–∏—Ç—å ‚Äî —É–¥–∞–ª–∏—Ç—å\n/–æ—Ç—á—ë—Ç [–≥–æ–¥-–º–µ—Å—è—Ü] ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text in ["üí∏ –†–∞—Å—Ö–æ–¥", "/—Ä–∞—Å—Ö–æ–¥"])
def start_expense(message):
    start_transaction(message, "—Ä–∞—Å—Ö–æ–¥")

@bot.message_handler(func=lambda message: message.text in ["üí∞ –î–æ—Ö–æ–¥", "/–¥–æ—Ö–æ–¥"])
def start_income(message):
    start_transaction(message, "–¥–æ—Ö–æ–¥")

def start_transaction(message, type_):
    chat_id = message.chat.id
    categories = list(set([row[0] for row in cat_sheet.get_all_values()[1:] if row[0]]))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in categories:
        markup.add(cat)
    markup.add("‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    user_state[chat_id] = {"step": "category", "type": type_}
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
def show_categories_button(message):
    show_all_categories(message)

@bot.message_handler(func=lambda message: message.text.startswith("üìä –û—Ç—á—ë—Ç"))
def report_button(message):
    from datetime import datetime
    current_month = datetime.now().strftime("%Y-%m")
    message.text = f"/–æ—Ç—á—ë—Ç {current_month}"
    monthly_report(message)

@bot.message_handler(func=lambda message: message.text == "‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def show_manage_options(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    markup.add("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å", "üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

RENAME_MODE = "rename"
DELETE_MODE = "delete"

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
def rename_category_step1(message):
    user_state[message.chat.id] = {"step": RENAME_MODE}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å:")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å")
def delete_category_step1(message):
    user_state[message.chat.id] = {"step": DELETE_MODE}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    send_welcome(message)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    chat_id = message.chat.id
    state = user_state.get(chat_id)
    if not state:
        return

    step = state["step"]

    if state["step"] == RENAME_MODE:
        old_name = message.text.strip()
        state["old_name"] = old_name
        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{old_name}':")
        state["step"] = "rename_to"
        return

    elif state["step"] == "rename_to":
        new_name = message.text.strip()
        old_name = state["old_name"]
        all_rows = cat_sheet.get_all_values()
        cat_sheet.clear()
        cat_sheet.append_row(["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"])  # –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for row in all_rows[1:]:
            row[0] = new_name if row[0] == old_name else row[0]
            cat_sheet.append_row(row)
        bot.send_message(chat_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'.")
        user_state.pop(chat_id, None)
        return

    elif state["step"] == DELETE_MODE:
        to_delete = message.text.strip()
        all_rows = cat_sheet.get_all_values()
        new_rows = [r for r in all_rows[1:] if r[0] != to_delete]
        cat_sheet.clear()
        cat_sheet.append_row(["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"])
        for row in new_rows:
            cat_sheet.append_row(row)
        bot.send_message(chat_id, f"üóë –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{to_delete}' —É–¥–∞–ª–µ–Ω–∞.")
        user_state.pop(chat_id, None)
        return

    
    if step == "category":
        if message.text == "‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            state["step"] = "new_category"
        else:
            state["category"] = message.text
            show_subcategories(chat_id, message.text)

    elif step == "new_category":
        category = message.text.strip()
        cat_sheet.append_row([category, ""])
        state["category"] = category
        bot.send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        show_subcategories(chat_id, category)

    elif step == "subcategory":
        if message.text == "‚ûï –ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            state["step"] = "new_subcategory"
        else:
            state["subcategory"] = message.text
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            state["step"] = "amount"

    elif step == "new_subcategory":
        subcategory = message.text.strip()
        cat_sheet.append_row([state["category"], subcategory])
        state["subcategory"] = subcategory
        bot.send_message(chat_id, f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        state["step"] = "amount"

    elif step == "amount":
        try:
            amount = float(message.text.strip())
            now = datetime.now()
            now_str = now.strftime("%Y-%m-%d %H:%M:%S")
            year = now.strftime("%Y")
            month = now.strftime("%Y-%m")
            user = message.from_user.username or message.from_user.first_name
            data_sheet.append_row([
                now_str,
                year,
                month,
                state.get("type", "—Ä–∞—Å—Ö–æ–¥"),
                amount,
                state["category"],
                state["subcategory"],
                user
            ])
            bot.send_message(chat_id, f"‚úÖ {state['type'].capitalize()} {amount}‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{state['category']} / {state['subcategory']}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        except ValueError:
            bot.send_message(chat_id, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250")
        finally:
            user_state.pop(chat_id, None)

def show_subcategories(chat_id, category):
    rows = cat_sheet.get_all_values()[1:]
    subcategories = [r[1] for r in rows if r[0] == category and r[1]]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for sub in subcategories:
        markup.add(sub)
    markup.add("‚ûï –ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    user_state[chat_id]["step"] = "subcategory"
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

def show_all_categories(message):
    rows = cat_sheet.get_all_values()[1:]
    if not rows:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    categories = {}
    for cat, sub in rows:
        if cat not in categories:
            categories[cat] = []
        if sub:
            categories[cat].append(sub)

    text = "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
    for cat, subs in categories.items():
        text += f"\n<b>{cat}</b>"
        if subs:
            text += f": {', '.join(subs)}"
    bot.send_message(message.chat.id, text, parse_mode="HTML")

def monthly_report(message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–æ—Ç—á—ë—Ç 2025-07")
        return

    month = parts[1]
    rows = data_sheet.get_all_values()[1:]
    filtered = [r for r in rows if r[2] == month]

    if not filtered:
        bot.send_message(message.chat.id, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month}")
        return

    expenses = {}
    incomes = {}

    for r in filtered:
        type_, amount, cat, sub = r[3], float(r[4]), r[5], r[6]
        if type_ == "—Ä–∞—Å—Ö–æ–¥":
            key = f"{cat} / {sub}"
            expenses[key] = expenses.get(key, 0) + amount
        else:
            key = f"{cat} / {sub}"
            incomes[key] = incomes.get(key, 0) + amount

    def format_block(title, data):
        if not data:
            return f"{title}: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        lines = [f"{k}: {round(v, 2)}‚ÇΩ" for k, v in data.items()]
        total = sum(data.values())
        return f"{title}:\n" + "\n".join(lines) + f"\n–ò—Ç–æ–≥–æ: {round(total, 2)}‚ÇΩ"

    report = f"üìä <b>–û—Ç—á—ë—Ç –∑–∞ {month}</b>\n\n"
    report += format_block("üí∏ –†–∞—Å—Ö–æ–¥—ã", expenses) + "\n\n"
    report += format_block("üí∞ –î–æ—Ö–æ–¥—ã", incomes)

    bot.send_message(message.chat.id, report, parse_mode="HTML")
    
# === –ê–ù–¢–ò–°–ü–ê–ú –ó–ê–©–ò–¢–ê ===

ALLOWED_USERS = [123456789]  # ‚Üê –∑–¥–µ—Å—å –≤–∞—à user_id

SPAM_KEYWORDS = ["airdrop", "freeether", "claim eth", "giveaway", "http://", "https://"]

def is_spam(message):
    text = message.text.lower()
    return any(keyword in text for keyword in SPAM_KEYWORDS)

@bot.message_handler(func=lambda message: True)
def main_handler(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    print(f"[{datetime.now()}] {user_id} ({username}): {message.text}")

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if user_id not in ALLOWED_USERS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if is_spam(message):
        bot.send_message(message.chat.id, "üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ.")
        return

    # ‚úÖ –ï—Å–ª–∏ –≤—Å—ë —á–∏—Å—Ç–æ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞
    handle_text(message)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
bot.polling()

